#!/usr/bin/env ruby
# frozen_string_literal: true

HELP = {
  'ros' => <<~HELP,
    ros <command> [<options>]

    RubyOnSpeed is a framework and a set of benchmarks of Ruby code idioms.

    commands:
      list      list benchmarks
      run       run benchmarks
      test      test benchmarks
      help      print command specific help
      version   print version information
  HELP
  'list' => <<~HELP,
    ros list [<options>] [<regexp> ...]

    List all available benchmarks or all benchmarks which match any of the regular
    expressions <regexp>.

    options:
    --format <format>   specify the output format
                        default  - simple list
                        markdown - markdown list with links
    --dir <name>        use <name> as directory to find benchmarks
    --no-bundle         don't use Bundler
  HELP
  'run' => <<~HELP,
    ros run [<options>] [<regexp> ...]

    Run all available benchmarks or all benchmarks which match any of the regular
    expressions <regexp>.

    options:
    --format <format>   specify the output format
                        default - detailed information
                        compact - print only result details
                        winner  - print only fastest code name
                        json    - JSON information
    --dir <name>        use <name> as directory to find benchmarks
    --no-bundle         don't use Bundler
  HELP
  'test' => <<~HELP,
    ros test [<options>] [<regexp> ...]

    Test all available benchmarks or all benchmarks which match any of the regular
    expressions <regexp>.

     options:
    --format <format>   specify the output format
                        default - status list
                        quite   - no output, just set the error code
    --dir <name>        use <name> as directory to find benchmarks
    --no-bundle         don't use Bundler
  HELP
  'help' => <<~HELP,
    ros help [<command>]

    Print <command> specific or generic help.
  HELP
  'version' => <<~HELP
    ros version

    Print RubyOnSpeed version information.
  HELP
}.freeze

COMMAND = ARGV.shift || 'help'

if %w[--version version].include?(COMMAND)
  require_relative('../lib/ruby-on-speed/version')
  puts("RubyOnSpeed v#{RubyOnSpeed::VERSION}")
  exit
end

def die!(msg, include_command: true, code: 1)
  $stderr.puts("#{include_command ? "ros-#{COMMAND}" : 'ros'}: #{msg}")
  exit(code)
end

def cmd_help(sub_command)
  help = HELP[sub_command] or die!("unknown command - #{sub_command}")
  print('usage: ')
  puts(help)
  exit
end

cmd_help(ARGV.shift || 'ros') if %w[-h --help help].include?(COMMAND)

OPTIONS = Struct.new(:format, :bundle, :dir, :regexp)['default', true]

def as_directory(dir)
  dir = File.expand_path(dir)
  return dir if File.directory?(dir) && File.readable?(dir)
  die!("not a readble directory - #{dir}")
end

def as_regexp(*args)
  args =
    args.filter_map do |arg|
      Regexp.new(arg, Regexp::IGNORECASE) unless arg.empty?
    rescue RegexpError => e
      die("invalid regular expression `#{arg}` - #{e}")
    end
  args.empty? ? nil : args
end

def parse_args(formats:)
  while ARGV[0]&.start_with?('-')
    case opt = ARGV.shift
    when '--'
      break
    when '-h', '--help'
      cmd_help(COMMAND)
    when '--format'
      OPTIONS.format = ARGV.shift or die!('argument missing - --format')
      next if formats.include?(OPTIONS.format)
      die!("unknown --format argument - #{OPTIONS.format}")
    when '--no-bundle'
      OPTIONS.bundle = false
    when '--dir'
      OPTIONS.dir = as_directory(ARGV.shift || die!('argument missing - --dir'))
    else
      die!("unknown option - #{opt}")
    end
  end
  OPTIONS.regexp = as_regexp(*ARGV)
  nil
end

def bundle!
  require('bundler/inline')
  gemfile do
    source('https://rubygems.org')
    gem('benchmark-ips', '>=2.9.3')
    gem('host-os')
  end
rescue LoadError => e
  die!(e, code: 3)
end

def perform
  bundle! if OPTIONS.bundle
  require_relative('../lib/ruby-on-speed')
  OPTIONS.dir ||= File.expand_path('../benchmarks', __dir__)
  RubyOnSpeed.load_from(OPTIONS.dir)
  RubyOnSpeed.filter!(*OPTIONS.regexp) if OPTIONS.regexp
  $stdout.sync = true
  exit(yield)
end

if COMMAND == 'test'
  parse_args(formats: %w[default quiet])
  perform do
    if OPTIONS.format == 'quiet'
      RubyOnSpeed.test!(report: false)
    else
      RubyOnSpeed.test!
    end
  end
end

if COMMAND == 'compare'
  parse_args(formats: %w[default])
  perform { RubyOnSpeed.find_best! }
end

if COMMAND == 'run'
  parse_args(formats: %w[default simple compact winner json])
  perform { RubyOnSpeed.report(format: OPTIONS.format) }
end

unless COMMAND == 'list'
  die!("unknown command - #{COMMAND}", include_command: false)
end

parse_args(formats: %w[default markdown])
perform do
  case OPTIONS.format
  when 'markdown'
    RubyOnSpeed.each do |bm|
      puts "- [#{bm.name}](#{bm.relative_source_file_name}) - #{bm.description}"
    end
  else
    width = RubyOnSpeed.each.max_by { |bm| bm.name.size }.name.size
    RubyOnSpeed.each { |bm| puts "#{bm.name.ljust(width)}  #{bm.description}" }
  end
  true
end

#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

HELP = {
  'ros' => <<~HELP,
    ros <command> [<options>]

    RubyOnSpeed is a framework and a set of benchmarks of Ruby code idioms.

    commands:
      list      list benchmarks
      run       run benchmarks
      test      test benchmarks
      help      print command specific help
      version   print version information
  HELP
  'list' => <<~HELP,
    ros list [<options>] [<regexp> ...]

    List all available benchmarks or all benchmarks which match any of the regular
    expressions <regexp>.

    options:
    --format <format>   specify the output format
                        default  - simple list
                        files    - file list of found benchmarks
                        markdown - markdown list with links
    --dir <name>        use <name> as directory to find benchmarks
  HELP
  'run' => <<~HELP,
    ros run [<options>] [<regexp> ...]

    Run all available benchmarks or all benchmarks which match any of the regular
    expressions <regexp>.

    options:
    --format <format>   specify the output format
                        default - detailed information
                        compact - print only result details
                        winner  - print only fastest code name
                        json    - JSON information
    --dir <name>        use <name> as directory to find benchmarks
  HELP
  'test' => <<~HELP,
    ros test [<options>] [<regexp> ...]

    Test all available benchmarks or all benchmarks which match any of the regular
    expressions <regexp>.

     options:
    --format <format>   specify the output format
                        default - status list
                        quite   - no output, just set the error code
    --dir <name>        use <name> as directory to find benchmarks
  HELP
  'help' => <<~HELP,
    ros help [<command>]

    Print <command> specific or generic help.
  HELP
  'version' => <<~HELP
    ros version

    Print RubyOnSpeed version information.
  HELP
}.freeze

if %w[-v --version version].include?(ARGV[0])
  require_relative('../lib/ruby-on-speed/version')
  puts("RubyOnSpeed v#{RubyOnSpeed::VERSION}")
  exit
end

def die!(msg, include_command: true, code: 1)
  $stderr.puts("#{include_command ? "ros-#{COMMAND}" : 'ros'}: #{msg}")
  exit(code)
end

def cmd_help(sub_command)
  print('usage: ')
  puts(HELP[sub_command])
  exit
end

def valid_cmd?(name)
  HELP.key?(name)
end

if %w[-h --help help].include?(ARGV[0])
  cmd = ARGV[1] or cmd_help('ros')
  cmd_help(cmd) if valid_cmd?(cmd)
  die!("unknown command - #{cmd}", include_command: false)
end

unless valid_cmd?(COMMAND = ARGV.shift)
  die!("unknown command - #{COMMAND}", include_command: false)
end

OPTIONS = Struct.new(:format, :dir, :regexp)['default']
while ARGV[0]&.start_with?('-')
  case opt = ARGV.shift
  when '--'
    break
  when '-h', '--help'
    cmd_help(COMMAND)
  when '--format'
    OPTIONS.format = ARGV.shift or die!('argument missing - --format')
  when '--dir'
    dir = File.expand_path(ARGV.shift || die!('argument missing - --dir'))
    unless File.directory?(dir) && File.readable?(dir)
      die!("not a readble directory - #{dir}")
    end
    OPTIONS.dir = dir
  else
    die!("unknown option - #{opt}")
  end
end
OPTIONS.dir ||= File.expand_path('../benchmarks', __dir__)

args =
  ARGV.filter_map do |arg|
    Regexp.new(arg, Regexp::IGNORECASE) unless arg.empty?
  rescue RegexpError => e
    die!("invalid regular expression `#{arg}` - #{e}")
  end
OPTIONS.regexp = args.empty? ? nil : args

def bundle!
  require('bundler/inline')
  gemfile do
    source('https://rubygems.org')
    gem('benchmark-ips', '>=2.9.3', require: false)
    gem('host-os', require: false)
  end
  require_relative('../lib/ruby-on-speed')
rescue LoadError => e
  die!(e, code: 3)
rescue Bundler::BundlerError => e
  die!("unable to load prerequisites - #{e}", code: 2)
end

def perform(formats)
  unless formats.include?(OPTIONS.format)
    die!("unknown --format argument - #{OPTIONS.format}")
  end
  bundle!
  RubyOnSpeed.load_from(OPTIONS.dir)
  RubyOnSpeed.filter!(*OPTIONS.regexp) if OPTIONS.regexp
  $stdout.sync = true
  exit(yield(OPTIONS.format))
end

if COMMAND == 'test'
  perform(%w[default quiet]) do |fmt|
    fmt == 'quiet' ? RubyOnSpeed.test!(report: false) : RubyOnSpeed.test!
  end
end

if COMMAND == 'run'
  perform(%w[default simple compact winner json]) do |fmt|
    RubyOnSpeed.report(format: fmt)
  end
end

perform(%w[default markdown files]) do |fmt|
  if fmt == 'markdown'
    RubyOnSpeed.each do |bm|
      puts(
        "- [#{bm.name}](#{bm.relative_source_file_name}) - #{bm.description}"
      )
    end
    next true
  end
  all = RubyOnSpeed.each.to_a
  next true if all.empty?
  width = all.max_by { _1.name.size }.name.size
  if fmt == 'default'
    all.each { puts("#{_1.name.ljust(width)}  #{_1.description}") }
    next true
  end
  all.each do |bm|
    puts("#{bm.name.ljust(width)}  #{bm.relative_source_file_name}")
  end
  true
end
